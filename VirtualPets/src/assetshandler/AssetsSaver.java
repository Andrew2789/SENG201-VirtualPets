package assetshandler;

import java.io.File;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.IOException;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.awt.Graphics2D;
import javax.imageio.ImageIO;
import java.util.ArrayList;

import model.Species;
import model.FoodType;
import model.ToyType;

/**
 * A class with purely static methods for the purposes of saving assets (Species, FoodTypes and ToyTypes) to a file.
 * @author Alex Tompkins (ato47)
 */
public class AssetsSaver {
	/**
	 * Writes all assets (both defaults and user-defined) to a given folder, along with their ImageIcons.
	 * @param folder
	 * The File object representing the folder to save to.
	 * @param species
	 * The array of Species to write to the folder.
	 * @param foodTypes
	 * The array of FoodTypes to write to the folder.
	 * @param toyTypes
	 * The array of ToyTypes to write to the folder.
	 * @throws IOException
	 * May throw IOException if the buffered output stream is interrupted when writing or closing itself, 
	 * or if the program is unable to make the folders it needs to.
	 */
	public static void writeAssetsToFile(File folder, Species[] species, FoodType[] foodTypes, ToyType[] toyTypes) throws IOException {
		// Create BufferedWriter for writing data to the config.txt file line-by-line.
		File configFile = new File(folder.getPath() + "/config.txt");
		FileWriter fileOut = null;
		BufferedWriter bufferOut = null;
		
		try {
			// Firstly, try to open a BufferedWriter on the file.
			fileOut = new FileWriter(configFile);
			bufferOut = new BufferedWriter(fileOut);
			
			// If this succeeds, then begin adding blocks to an ArrayList, ready to write them to the file.
			ArrayList<String> linesToWrite = new ArrayList<String>();
			linesToWrite.addAll(generateSpeciesBlocks(species));
			linesToWrite.addAll(generateFoodTypeBlocks(foodTypes));
			linesToWrite.addAll(generateToyTypeBlocks(toyTypes));
			
			// Finally, write each line to the file, separated by newline characters.
			for (String line : linesToWrite) {
				bufferOut.write(line);
				bufferOut.newLine();
			}
			
			// Then prepare to save the images for each asset in the images folder.
			File imagesFolder = new File(folder.getPath() + "/images");
			// Check if the images folder exists first. If so, use it. Otherwise, try to create it.
			if (imagesFolder.exists() || imagesFolder.mkdir())
				saveIcons(imagesFolder, species, foodTypes, toyTypes);
			else
				// If it neither existed nor could be created, raise an exception.
				throw new IOException("Asset images folder could not be created.");
		}
		catch (IOException exc) {
			if (exc.getMessage().equals(""))
				exc = new IOException("An error occurred when writing the asset files.");
			throw exc;
		}
		finally {
			// Once done, even if there was an error, try to close the buffer and the output stream gracefully.
			try {
				if (bufferOut != null)
					bufferOut.close();
				if (fileOut != null)
					fileOut.close();
			}
			catch (IOException exc) {
				System.err.println("An error occurred when closing the assets config file.");
			}
		}
	}
	
	/**
	 * Generates a 'block' for each Species object, either default or user-defined.
	 * @param speciesArray
	 * The array of Species in the game.
	 * @return
	 * Return an ArrayList of lines generated by this method.
	 */
	private static ArrayList<String> generateSpeciesBlocks(Species[] speciesArray) {
		ArrayList<String> text = new ArrayList<String>();
		
		text.add("@Species");
		for (Species species : speciesArray) {
			text.add(String.format("$%s", species.getName()));
			text.add(String.format("\t" + "name=\"%s\"", species.getName()));
			text.add(String.format("\t" + "icon=\"/images/species/%s.png\"", species.getName()));
			text.add(String.format("\t" + "optimumWeight=%d", species.getOptimumWeight()));
			text.add(String.format("\t" + "hungerGain=%d", species.getHungerGain()));
			text.add(String.format("\t" + "energyLoss=%d", species.getEnergyLoss()));
			text.add(String.format("\t" + "happinessLoss=%d", species.getHappinessLoss()));
			text.add(String.format("\t" + "minToyDamage=%d", species.getMinToyDamage()));
			text.add(String.format("\t" + "maxToyDamage=%d", species.getMaxToyDamage()));
			text.add(String.format("/%s", species.getName()));
		}
		text.add("@Species");
		
		return text;
	}

	/**
	 * Generates a 'block' for each FoodType object, either default or user-defined.
	 * @param foodTypes
	 * The array of FoodTypes in the game.
	 * @return
	 * Return an ArrayList of lines generated by this method.
	 */
	private static ArrayList<String> generateFoodTypeBlocks(FoodType[] foodTypes) {
		ArrayList<String> text = new ArrayList<String>();
		
		text.add("@FoodTypes");
		for (FoodType food : foodTypes) {
			text.add(String.format("$%s", food.getName()));
			text.add(String.format("\t" + "name=\"%s\"", food.getName()));
			text.add(String.format("\t" + "icon=\"/images/food/%s.png\"", food.getName()));
			text.add(String.format("\t" + "price=%d", food.getPrice()));
			text.add(String.format("\t" + "nutrition=%d", food.getNutrition()));
			text.add(String.format("\t" + "tastiness=%d", food.getTastiness()));
			text.add(String.format("\t" + "weight=%d", food.getWeight()));
			text.add(String.format("/%s", food.getName()));
		}
		text.add("@FoodTypes");
		
		return text;
	}
	
	/**
	 * Generates a 'block' for each ToyType object, either default or user-defined.
	 * @param toyTypes
	 * The array of ToyTypes in the game.
	 * @return
	 * Return an ArrayList of lines generated by this method.
	 */
	private static ArrayList<String> generateToyTypeBlocks(ToyType[] toyTypes) {
		ArrayList<String> text = new ArrayList<String>();
		
		text.add("@ToyTypes");
		for (ToyType toy : toyTypes) {
			text.add(String.format("$%s", toy.getName()));
			text.add(String.format("\t" + "name=\"%s\"", toy.getName()));
			text.add(String.format("\t" + "icon=\"/images/toys/%s.png\"", toy.getName()));
			text.add(String.format("\t" + "price=%d", toy.getPrice()));
			text.add(String.format("\t" + "happinessGain=%d", toy.getHappinessGain()));
			text.add(String.format("/%s", toy.getName()));
		}
		text.add("@ToyTypes");
		
		return text;
	}
	
	/**
	 * Generates .png files within the images folder for each Species, FoodType and ToyType defined in the game.
	 * @param imagesFolder
	 * The File object representing the images folder.
	 * @param speciesArray
	 * The array of Species in the game to save icons for.
	 * @param foodTypes
	 * The array of FoodTypes in the game to save icons for.
	 * @param toyTypes
	 * The array of ToyTypes in the game to save icons for.
	 * @throws IOException
	 * May throw IOException if any folders cannot be created.
	 */
	private static void saveIcons(File imagesFolder, Species[] speciesArray, FoodType[] foodTypes, ToyType[] toyTypes) throws IOException {
		// Generate a species folder within the images folder, if not already there.
		File speciesFolder = new File(imagesFolder.getPath() + "/species");
		if (speciesFolder.exists() || speciesFolder.mkdir()) {
			// For each Species, create a .png file there from its name.
			for (Species species : speciesArray) {
				File imageFile = new File(speciesFolder.getPath() + String.format("/%s.png", species.getName()));
				writeIcon(imageFile, species.getIcon().getImage());
			}
		}
		else
			throw new IOException("Folder for species icons could not be created.");
		
		// Generate a food folder within the images folder, if not already there.
		File foodFolder = new File(imagesFolder.getPath() + "/food");
		if (foodFolder.exists() || foodFolder.mkdir()) {
			// For each FoodType, create a .png file there from its name.
			for (FoodType food : foodTypes) {
				File imageFile = new File(foodFolder.getPath() + String.format("/%s.png", food.getName()));
				writeIcon(imageFile, food.getIcon().getImage());
			}
		}
		else
			throw new IOException("Folder for toy icons could not be created.");
		
		// Generate a toys folder within the images folder, if not already there.
		File toysFolder = new File(imagesFolder.getPath() + "/toys");
		if (toysFolder.exists() || toysFolder.mkdir()) {
			// For each ToyType, create a .png file there from its name.
			for (ToyType toy : toyTypes) {
				File imageFile = new File(toysFolder.getPath() + String.format("/%s.png", toy.getName()));
				writeIcon(imageFile, toy.getIcon().getImage());
			}
		}
		else
			throw new IOException("Folder for toy icons could not be created.");
	}
	
	/**
	 * Writes an image file for the given icon. To do this, it must convert the image to a buffered image by drawing the 
	 * image onto a blank buffered image's graphics layer, then disposing of the graphics layer to make the changes permanent.
	 * @param file
	 * The File object to save the image to.
	 * @param icon
	 * The icon the save a file of.
	 * @throws IOException
	 * May throw IOException if the writing of the image is interrupted.
	 */
	private static void writeIcon(File file, Image icon) throws IOException {
		BufferedImage buffered = new BufferedImage(icon.getWidth(null), icon.getHeight(null), BufferedImage.TYPE_INT_ARGB);
		Graphics2D graphics = buffered.createGraphics();
		graphics.drawImage(icon, 0, 0, null);
		graphics.dispose();
		
		ImageIO.write(buffered, "png", file);
	}
}
